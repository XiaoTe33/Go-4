package main

import (
	"encoding/json"
	"fmt"
	"os"
)

func main() {
	createFileIfNotExist()
	createFileIfNotExist()
	var b int
	for {
		if b == 1 {
			fmt.Println("程序已退出")
			break
		}
		fmt.Println("—————————")
		fmt.Println("1.注册")
		fmt.Println("0.退出")
		fmt.Println("————————")
		fmt.Println("请输入操作：")
		var a int
		fmt.Scan(&a)
		switch a {
		case 1:
			data := toMap()
			var username string
			var password string
			fmt.Println("请输入用户名：")
			fmt.Scan(&username)
			fmt.Println("请输入密码：")
			fmt.Scan(&password)
			data[username] = password
			toFile(data)
		default:
			b = 1
		}
	}

}
func createFileIfNotExist() {
	f, err := os.Open("users.data")
	defer f.Close()
	if err != nil {
		os.Create("users.data")
	}

}
func toFile(data map[string]string) {

	b, _ := json.Marshal(data)
	f, _ := os.Create("users.data")
	f.Write(b)
}
func toMap() (a map[string]string) {
	f, _ := os.Open("users.data")
	defer f.Close()
	b := make([]byte, 300)
	for {
		n, _ := f.Read(b)
		if n == 0 {
			break
		}
	}
	var s []byte
	for i := 0; i < len(b); i++ {
		if b[i] == 0 {
			break
		}
		s = append(s, b[i])
	}
	json.Unmarshal(s, &a)

	if a == nil {
		return map[string]string{"用户名": "密码"}
	}
	return
}

var user map[string]string
